// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RiskSuite.DataAccess;

namespace RiskSuite.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210402202842_tryMig")]
    partial class tryMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminator");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("CommitteeLimitId")
                        .HasColumnType("integer")
                        .HasColumnName("committee_limit_id");

                    b.Property<int>("CommitteeStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("committee_status_id");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.HasKey("Id")
                        .HasName("pk_committees");

                    b.HasIndex("CommitteeLimitId")
                        .HasDatabaseName("ix_committees_committee_limit_id");

                    b.HasIndex("CommitteeStatusId")
                        .HasDatabaseName("ix_committees_committee_status_id");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_committees_counterparty_id");

                    b.ToTable("committees");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CommitteeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_committee_limits");

                    b.ToTable("committee_limits");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CommitteeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_committee_statuses");

                    b.ToTable("committee_statuses");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BankClass")
                        .HasColumnType("text")
                        .HasColumnName("bank_class");

                    b.Property<string>("Causes")
                        .HasColumnType("text")
                        .HasColumnName("causes");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("CounterpartyGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_group_id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("CountryRiskId")
                        .HasColumnType("integer")
                        .HasColumnName("country_risk_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Duns")
                        .HasColumnType("text")
                        .HasColumnName("duns");

                    b.Property<int?>("FinancialSectorId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_sector_id");

                    b.Property<string>("Gtc")
                        .HasColumnType("text")
                        .HasColumnName("gtc");

                    b.Property<string>("Inn")
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<bool>("IsEfet")
                        .HasColumnType("boolean")
                        .HasColumnName("is_efet");

                    b.Property<bool>("IsEtp")
                        .HasColumnType("boolean")
                        .HasColumnName("is_etp");

                    b.Property<bool>("IsIntraGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_intra_group");

                    b.Property<bool>("IsLongTerm")
                        .HasColumnType("boolean")
                        .HasColumnName("is_long_term");

                    b.Property<bool>("IsMonitored")
                        .HasColumnType("boolean")
                        .HasColumnName("is_monitored");

                    b.Property<bool>("IsSrk")
                        .HasColumnType("boolean")
                        .HasColumnName("is_srk");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RatingDonorId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_donor_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Swift")
                        .HasColumnType("text")
                        .HasColumnName("swift");

                    b.Property<string>("Ticker")
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasKey("Id")
                        .HasName("pk_counterparties");

                    b.HasIndex("CounterpartyGroupId")
                        .HasDatabaseName("ix_counterparties_counterparty_group_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_counterparties_country_id");

                    b.HasIndex("CountryRiskId")
                        .HasDatabaseName("ix_counterparties_country_risk_id");

                    b.HasIndex("FinancialSectorId")
                        .HasDatabaseName("ix_counterparties_financial_sector_id");

                    b.HasIndex("RatingDonorId")
                        .HasDatabaseName("ix_counterparties_rating_donor_id");

                    b.ToTable("counterparties");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CounterpartyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_counterparty_groups");

                    b.ToTable("counterparty_groups");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CounterpartyPortfolio", b =>
                {
                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.HasKey("CounterpartyId", "PortfolioId")
                        .HasName("pk_counterparty_portfolios");

                    b.HasIndex("PortfolioId")
                        .HasDatabaseName("ix_counterparty_portfolios_portfolio_id");

                    b.ToTable("counterparty_portfolios");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("ticker")
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyFromId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_from_id");

                    b.Property<int>("CurrencyToId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_to_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("pk_currency_rates");

                    b.HasIndex("CurrencyFromId")
                        .HasDatabaseName("ix_currency_rates_currency_from_id");

                    b.HasIndex("CurrencyToId")
                        .HasDatabaseName("ix_currency_rates_currency_to_id");

                    b.ToTable("currency_rates");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.FinancialSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.HasKey("Id")
                        .HasName("pk_financial_sectors");

                    b.ToTable("financial_sectors");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.FinancialStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("FinancialStatementStandardId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_statement_standard_id");

                    b.HasKey("Id")
                        .HasName("pk_financial_statements");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_financial_statements_counterparty_id");

                    b.HasIndex("FinancialStatementStandardId")
                        .HasDatabaseName("ix_financial_statements_financial_statement_standard_id");

                    b.ToTable("financial_statements");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.FinancialStatementStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_financial_statement_standards");

                    b.ToTable("financial_statement_standards");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Guarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AmountInitial")
                        .HasColumnType("bigint")
                        .HasColumnName("amount_initial");

                    b.Property<int>("BeneficiarId")
                        .HasColumnType("integer")
                        .HasColumnName("beneficiar_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int?>("GuaranteeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_type_id");

                    b.Property<int>("GuarantorId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantor_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<int>("SubsidiaryId")
                        .HasColumnType("integer")
                        .HasColumnName("subsidiary_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantees");

                    b.HasIndex("BeneficiarId")
                        .HasDatabaseName("ix_guarantees_beneficiar_id");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_guarantees_counterparty_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_guarantees_currency_id");

                    b.HasIndex("GuaranteeTypeId")
                        .HasDatabaseName("ix_guarantees_guarantee_type_id");

                    b.HasIndex("GuarantorId")
                        .HasDatabaseName("ix_guarantees_guarantor_id");

                    b.HasIndex("SubsidiaryId")
                        .HasDatabaseName("ix_guarantees_subsidiary_id");

                    b.ToTable("guarantees");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeApprovalDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateApproval")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_approval");

                    b.Property<int>("GuaranteeApprovalDocTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_approval_doc_type_id");

                    b.Property<int>("GuaranteeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_approval_docs");

                    b.HasIndex("GuaranteeApprovalDocTypeId")
                        .HasDatabaseName("ix_guarantee_approval_docs_guarantee_approval_doc_type_id");

                    b.HasIndex("GuaranteeId")
                        .HasDatabaseName("ix_guarantee_approval_docs_guarantee_id");

                    b.ToTable("guarantee_approval_docs");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeApprovalDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_approval_doc_types");

                    b.ToTable("guarantee_approval_doc_types");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("DateAgreeEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_agree_end");

                    b.Property<DateTime>("DateAgreeStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_agree_start");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<int>("GuaranteeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_type_id");

                    b.Property<int>("GuarantorId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantor_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_limits");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_guarantee_limits_currency_id");

                    b.HasIndex("GuaranteeTypeId")
                        .HasDatabaseName("ix_guarantee_limits_guarantee_type_id");

                    b.HasIndex("GuarantorId")
                        .HasDatabaseName("ix_guarantee_limits_guarantor_id");

                    b.ToTable("guarantee_limits");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<long>("AmountOperation")
                        .HasColumnType("bigint")
                        .HasColumnName("amount_operation");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expiration");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_report");

                    b.Property<int>("GuaranteeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_reports");

                    b.HasIndex("GuaranteeId")
                        .HasDatabaseName("ix_guarantee_reports_guarantee_id");

                    b.ToTable("guarantee_reports");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_types");

                    b.ToTable("guarantee_types");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.HasKey("Id")
                        .HasName("pk_portfolios");

                    b.ToTable("portfolios");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RatingGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_group_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("RatingGroupId")
                        .HasDatabaseName("ix_ratings_rating_group_id");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rating_agencies");

                    b.ToTable("rating_agencies");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("RatingAgencyId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_agency_id");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_countries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_rating_countries_country_id");

                    b.HasIndex("RatingAgencyId")
                        .HasDatabaseName("ix_rating_countries_rating_agency_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_countries_rating_id");

                    b.ToTable("rating_countries");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingExternal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("RatingAgencyId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_agency_id");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_externals");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_rating_externals_counterparty_id");

                    b.HasIndex("RatingAgencyId")
                        .HasDatabaseName("ix_rating_externals_rating_agency_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_externals_rating_id");

                    b.ToTable("rating_externals");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("group_limit");

                    b.Property<long>("GroupLimitBank")
                        .HasColumnType("bigint")
                        .HasColumnName("group_limit_bank");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_rating_groups");

                    b.ToTable("rating_groups");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingInternal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Analyst")
                        .HasColumnType("text")
                        .HasColumnName("analyst");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int?>("FinancialStatementId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_statement_id");

                    b.Property<bool>("IsConservative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_conservative");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.Property<int?>("RatingWcId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_wc_id");

                    b.Property<int?>("RiskClassId")
                        .HasColumnType("integer")
                        .HasColumnName("risk_class_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_internals");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_rating_internals_counterparty_id");

                    b.HasIndex("FinancialStatementId")
                        .HasDatabaseName("ix_rating_internals_financial_statement_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_internals_rating_id");

                    b.HasIndex("RatingWcId")
                        .HasDatabaseName("ix_rating_internals_rating_wc_id");

                    b.HasIndex("RiskClassId")
                        .HasDatabaseName("ix_rating_internals_risk_class_id");

                    b.ToTable("rating_internals");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RiskClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_risk_classes");

                    b.ToTable("risk_classes");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Subsidiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_subsidiaries");

                    b.ToTable("subsidiaries");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_users_department_id");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Committee", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.CommitteeLimit", "CommitteeLimit")
                        .WithMany()
                        .HasForeignKey("CommitteeLimitId")
                        .HasConstraintName("fk_committees_committee_limits_committee_limit_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.CommitteeStatus", "CommitteeStatus")
                        .WithMany()
                        .HasForeignKey("CommitteeStatusId")
                        .HasConstraintName("fk_committees_committee_statuses_committee_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("Committees")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_committees_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommitteeLimit");

                    b.Navigation("CommitteeStatus");

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.CounterpartyGroup", "CounterpartyGroup")
                        .WithMany()
                        .HasForeignKey("CounterpartyGroupId")
                        .HasConstraintName("fk_counterparties_counterparty_groups_counterparty_group_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_counterparties_countries_country_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Country", "CountryRisk")
                        .WithMany()
                        .HasForeignKey("CountryRiskId")
                        .HasConstraintName("fk_counterparties_countries_country_risk_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.FinancialSector", "FinancialSector")
                        .WithMany()
                        .HasForeignKey("FinancialSectorId")
                        .HasConstraintName("fk_counterparties_financial_sectors_financial_sector_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "RatingDonor")
                        .WithMany()
                        .HasForeignKey("RatingDonorId")
                        .HasConstraintName("fk_counterparties_counterparties_rating_donor_id");

                    b.Navigation("CounterpartyGroup");

                    b.Navigation("Country");

                    b.Navigation("CountryRisk");

                    b.Navigation("FinancialSector");

                    b.Navigation("RatingDonor");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CounterpartyPortfolio", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("CounterpartyPortfolios")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_counterparty_portfolios_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Portfolio", "Portfolio")
                        .WithMany("CounterpartyPortfolios")
                        .HasForeignKey("PortfolioId")
                        .HasConstraintName("fk_counterparty_portfolios_portfolios_portfolio_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.CurrencyRate", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Currency", "CurrencyFrom")
                        .WithMany()
                        .HasForeignKey("CurrencyFromId")
                        .HasConstraintName("fk_currency_rates_currencies_currency_from_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Currency", "CurrencyTo")
                        .WithMany()
                        .HasForeignKey("CurrencyToId")
                        .HasConstraintName("fk_currency_rates_currencies_currency_to_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyFrom");

                    b.Navigation("CurrencyTo");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.FinancialStatement", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("FinancialStatements")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_financial_statements_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.FinancialStatementStandard", "FinancialStatementStandard")
                        .WithMany()
                        .HasForeignKey("FinancialStatementStandardId")
                        .HasConstraintName("fk_financial_statements_financial_statement_standards_financia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("FinancialStatementStandard");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Guarantee", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Beneficiar")
                        .WithMany("BeneficiarGuarantees")
                        .HasForeignKey("BeneficiarId")
                        .HasConstraintName("fk_guarantees_counterparties_beneficiar_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("Guarantees")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_guarantees_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_guarantees_currencies_currency_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.GuaranteeType", "GuaranteeType")
                        .WithMany()
                        .HasForeignKey("GuaranteeTypeId")
                        .HasConstraintName("fk_guarantees_guarantee_types_guarantee_type_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Guarantor")
                        .WithMany("GuarantorGuarantees")
                        .HasForeignKey("GuarantorId")
                        .HasConstraintName("fk_guarantees_counterparties_guarantor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Subsidiary", "Subsidiary")
                        .WithMany()
                        .HasForeignKey("SubsidiaryId")
                        .HasConstraintName("fk_guarantees_subsidiaries_subsidiary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiar");

                    b.Navigation("Counterparty");

                    b.Navigation("Currency");

                    b.Navigation("GuaranteeType");

                    b.Navigation("Guarantor");

                    b.Navigation("Subsidiary");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeApprovalDoc", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.GuaranteeApprovalDocType", "GuaranteeApprovalDocType")
                        .WithMany()
                        .HasForeignKey("GuaranteeApprovalDocTypeId")
                        .HasConstraintName("fk_guarantee_approval_docs_guarantee_approval_doc_types_guaran")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Guarantee", "Guarantee")
                        .WithMany()
                        .HasForeignKey("GuaranteeId")
                        .HasConstraintName("fk_guarantee_approval_docs_guarantees_guarantee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guarantee");

                    b.Navigation("GuaranteeApprovalDocType");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeLimit", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_guarantee_limits_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.GuaranteeType", "GuaranteeType")
                        .WithMany()
                        .HasForeignKey("GuaranteeTypeId")
                        .HasConstraintName("fk_guarantee_limits_guarantee_types_guarantee_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Guarantor")
                        .WithMany()
                        .HasForeignKey("GuarantorId")
                        .HasConstraintName("fk_guarantee_limits_counterparties_guarantor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("GuaranteeType");

                    b.Navigation("Guarantor");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.GuaranteeReport", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Guarantee", "Guarantee")
                        .WithMany()
                        .HasForeignKey("GuaranteeId")
                        .HasConstraintName("fk_guarantee_reports_guarantees_guarantee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guarantee");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Rating", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.RatingGroup", "RatingGroup")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingGroupId")
                        .HasConstraintName("fk_ratings_rating_groups_rating_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingGroup");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingCountry", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_rating_countries_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.RatingAgency", "RatingAgency")
                        .WithMany()
                        .HasForeignKey("RatingAgencyId")
                        .HasConstraintName("fk_rating_countries_rating_agencies_rating_agency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_countries_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Rating");

                    b.Navigation("RatingAgency");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingExternal", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("RatingExternals")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_rating_externals_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.RatingAgency", "RatingAgency")
                        .WithMany()
                        .HasForeignKey("RatingAgencyId")
                        .HasConstraintName("fk_rating_externals_rating_agencies_rating_agency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_externals_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Rating");

                    b.Navigation("RatingAgency");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingInternal", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("RatingInternals")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_rating_internals_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.FinancialStatement", "FinancialStatement")
                        .WithMany()
                        .HasForeignKey("FinancialStatementId")
                        .HasConstraintName("fk_rating_internals_financial_statements_financial_statement_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_internals_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiskSuite.DataAccess.CredRisk.Rating", "RatingWc")
                        .WithMany()
                        .HasForeignKey("RatingWcId")
                        .HasConstraintName("fk_rating_internals_ratings_rating_wc_id");

                    b.HasOne("RiskSuite.DataAccess.CredRisk.RiskClass", "RiskClass")
                        .WithMany()
                        .HasForeignKey("RiskClassId")
                        .HasConstraintName("fk_rating_internals_risk_classes_risk_class_id");

                    b.Navigation("Counterparty");

                    b.Navigation("FinancialStatement");

                    b.Navigation("Rating");

                    b.Navigation("RatingWc");

                    b.Navigation("RiskClass");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.ApplicationUser", b =>
                {
                    b.HasOne("RiskSuite.DataAccess.Department", "Department")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_users_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.Navigation("BeneficiarGuarantees");

                    b.Navigation("Committees");

                    b.Navigation("CounterpartyPortfolios");

                    b.Navigation("FinancialStatements");

                    b.Navigation("Guarantees");

                    b.Navigation("GuarantorGuarantees");

                    b.Navigation("RatingExternals");

                    b.Navigation("RatingInternals");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.Portfolio", b =>
                {
                    b.Navigation("CounterpartyPortfolios");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.CredRisk.RatingGroup", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("RiskSuite.DataAccess.Department", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
