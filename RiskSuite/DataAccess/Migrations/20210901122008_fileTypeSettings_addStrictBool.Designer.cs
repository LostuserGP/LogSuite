// <auto-generated />
using System;
using LogSuite.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LogSuite.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210901122008_fileTypeSettings_addStrictBool")]
    partial class fileTypeSettings_addStrictBool
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("LogSuite.DataAccess.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CustomClaim")
                        .HasColumnType("text")
                        .HasColumnName("custom_claim");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("integer")
                        .HasColumnName("department_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_users");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("ix_asp_net_users_department_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Committee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("CommitteeLimitId")
                        .HasColumnType("integer")
                        .HasColumnName("committee_limit_id");

                    b.Property<int>("CommitteeStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("committee_status_id");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.HasKey("Id")
                        .HasName("pk_committees");

                    b.HasIndex("CommitteeLimitId")
                        .HasDatabaseName("ix_committees_committee_limit_id");

                    b.HasIndex("CommitteeStatusId")
                        .HasDatabaseName("ix_committees_committee_status_id");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_committees_counterparty_id");

                    b.ToTable("committees");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CommitteeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_committee_limits");

                    b.ToTable("committee_limits");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CommitteeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_committee_statuses");

                    b.ToTable("committee_statuses");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BankClass")
                        .HasColumnType("text")
                        .HasColumnName("bank_class");

                    b.Property<string>("Causes")
                        .HasColumnType("text")
                        .HasColumnName("causes");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("CounterpartyGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_group_id");

                    b.Property<int?>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int?>("CountryRiskId")
                        .HasColumnType("integer")
                        .HasColumnName("country_risk_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<string>("Duns")
                        .HasColumnType("text")
                        .HasColumnName("duns");

                    b.Property<int?>("FinancialSectorId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_sector_id");

                    b.Property<string>("Gtc")
                        .HasColumnType("text")
                        .HasColumnName("gtc");

                    b.Property<string>("Inn")
                        .HasColumnType("text")
                        .HasColumnName("inn");

                    b.Property<bool>("IsEfet")
                        .HasColumnType("boolean")
                        .HasColumnName("is_efet");

                    b.Property<bool>("IsEtp")
                        .HasColumnType("boolean")
                        .HasColumnName("is_etp");

                    b.Property<bool>("IsIntraGroup")
                        .HasColumnType("boolean")
                        .HasColumnName("is_intra_group");

                    b.Property<bool>("IsLongTerm")
                        .HasColumnType("boolean")
                        .HasColumnName("is_long_term");

                    b.Property<bool>("IsMonitored")
                        .HasColumnType("boolean")
                        .HasColumnName("is_monitored");

                    b.Property<bool>("IsSrk")
                        .HasColumnType("boolean")
                        .HasColumnName("is_srk");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("RatingDonorId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_donor_id");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Swift")
                        .HasColumnType("text")
                        .HasColumnName("swift");

                    b.Property<string>("Ticker")
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasKey("Id")
                        .HasName("pk_counterparties");

                    b.HasIndex("CounterpartyGroupId")
                        .HasDatabaseName("ix_counterparties_counterparty_group_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_counterparties_country_id");

                    b.HasIndex("CountryRiskId")
                        .HasDatabaseName("ix_counterparties_country_risk_id");

                    b.HasIndex("FinancialSectorId")
                        .HasDatabaseName("ix_counterparties_financial_sector_id");

                    b.HasIndex("RatingDonorId")
                        .HasDatabaseName("ix_counterparties_rating_donor_id");

                    b.ToTable("counterparties");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CounterpartyGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_counterparty_groups");

                    b.ToTable("counterparty_groups");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CounterpartyPortfolio", b =>
                {
                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("integer")
                        .HasColumnName("portfolio_id");

                    b.HasKey("CounterpartyId", "PortfolioId")
                        .HasName("pk_counterparty_portfolios");

                    b.HasIndex("PortfolioId")
                        .HasDatabaseName("ix_counterparty_portfolios_portfolio_id");

                    b.ToTable("counterparty_portfolios");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CurrencyRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CurrencyFromId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_from_id");

                    b.Property<int>("CurrencyToId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_to_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<float>("Rate")
                        .HasColumnType("real")
                        .HasColumnName("rate");

                    b.HasKey("Id")
                        .HasName("pk_currency_rates");

                    b.HasIndex("CurrencyFromId")
                        .HasDatabaseName("ix_currency_rates_currency_from_id");

                    b.HasIndex("CurrencyToId")
                        .HasDatabaseName("ix_currency_rates_currency_to_id");

                    b.ToTable("currency_rates");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.FinancialSector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.HasKey("Id")
                        .HasName("pk_financial_sectors");

                    b.ToTable("financial_sectors");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.FinancialStatement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("FinancialStatementStandardId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_statement_standard_id");

                    b.HasKey("Id")
                        .HasName("pk_financial_statements");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_financial_statements_counterparty_id");

                    b.HasIndex("FinancialStatementStandardId")
                        .HasDatabaseName("ix_financial_statements_financial_statement_standard_id");

                    b.ToTable("financial_statements");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.FinancialStatementStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_financial_statement_standards");

                    b.ToTable("financial_statement_standards");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Guarantee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AmountInitial")
                        .HasColumnType("bigint")
                        .HasColumnName("amount_initial");

                    b.Property<int>("BeneficiarId")
                        .HasColumnType("integer")
                        .HasColumnName("beneficiar_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int?>("GuaranteeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_type_id");

                    b.Property<int>("GuarantorId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantor_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<int>("SubsidiaryId")
                        .HasColumnType("integer")
                        .HasColumnName("subsidiary_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantees");

                    b.HasIndex("BeneficiarId")
                        .HasDatabaseName("ix_guarantees_beneficiar_id");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_guarantees_counterparty_id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_guarantees_currency_id");

                    b.HasIndex("GuaranteeTypeId")
                        .HasDatabaseName("ix_guarantees_guarantee_type_id");

                    b.HasIndex("GuarantorId")
                        .HasDatabaseName("ix_guarantees_guarantor_id");

                    b.HasIndex("SubsidiaryId")
                        .HasDatabaseName("ix_guarantees_subsidiary_id");

                    b.ToTable("guarantees");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeApprovalDoc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateApproval")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_approval");

                    b.Property<int>("GuaranteeApprovalDocTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_approval_doc_type_id");

                    b.Property<int>("GuaranteeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_id");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_approval_docs");

                    b.HasIndex("GuaranteeApprovalDocTypeId")
                        .HasDatabaseName("ix_guarantee_approval_docs_guarantee_approval_doc_type_id");

                    b.HasIndex("GuaranteeId")
                        .HasDatabaseName("ix_guarantee_approval_docs_guarantee_id");

                    b.ToTable("guarantee_approval_docs");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeApprovalDocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_approval_doc_types");

                    b.ToTable("guarantee_approval_doc_types");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("DateAgreeEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_agree_end");

                    b.Property<DateTime>("DateAgreeStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_agree_start");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_end");

                    b.Property<int>("GuaranteeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_type_id");

                    b.Property<int>("GuarantorId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantor_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_limits");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("ix_guarantee_limits_currency_id");

                    b.HasIndex("GuaranteeTypeId")
                        .HasDatabaseName("ix_guarantee_limits_guarantee_type_id");

                    b.HasIndex("GuarantorId")
                        .HasDatabaseName("ix_guarantee_limits_guarantor_id");

                    b.ToTable("guarantee_limits");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint")
                        .HasColumnName("amount");

                    b.Property<long>("AmountOperation")
                        .HasColumnType("bigint")
                        .HasColumnName("amount_operation");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expiration");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_report");

                    b.Property<int>("GuaranteeId")
                        .HasColumnType("integer")
                        .HasColumnName("guarantee_id");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_reports");

                    b.HasIndex("GuaranteeId")
                        .HasDatabaseName("ix_guarantee_reports_guarantee_id");

                    b.ToTable("guarantee_reports");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_guarantee_types");

                    b.ToTable("guarantee_types");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.HasKey("Id")
                        .HasName("pk_portfolios");

                    b.ToTable("portfolios");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RatingGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_group_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("Id")
                        .HasName("pk_ratings");

                    b.HasIndex("RatingGroupId")
                        .HasDatabaseName("ix_ratings_rating_group_id");

                    b.ToTable("ratings");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_rating_agencies");

                    b.ToTable("rating_agencies");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("RatingAgencyId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_agency_id");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_countries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_rating_countries_country_id");

                    b.HasIndex("RatingAgencyId")
                        .HasDatabaseName("ix_rating_countries_rating_agency_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_countries_rating_id");

                    b.ToTable("rating_countries");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingExternal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int>("RatingAgencyId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_agency_id");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_externals");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_rating_externals_counterparty_id");

                    b.HasIndex("RatingAgencyId")
                        .HasDatabaseName("ix_rating_externals_rating_agency_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_externals_rating_id");

                    b.ToTable("rating_externals");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("GroupLimit")
                        .HasColumnType("bigint")
                        .HasColumnName("group_limit");

                    b.Property<long>("GroupLimitBank")
                        .HasColumnType("bigint")
                        .HasColumnName("group_limit_bank");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_rating_groups");

                    b.ToTable("rating_groups");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingInternal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Analyst")
                        .HasColumnType("text")
                        .HasColumnName("analyst");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int>("CounterpartyId")
                        .HasColumnType("integer")
                        .HasColumnName("counterparty_id");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_start");

                    b.Property<int?>("FinancialStatementId")
                        .HasColumnType("integer")
                        .HasColumnName("financial_statement_id");

                    b.Property<bool>("IsConservative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_conservative");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    b.Property<int?>("RatingWcId")
                        .HasColumnType("integer")
                        .HasColumnName("rating_wc_id");

                    b.Property<int?>("RiskClassId")
                        .HasColumnType("integer")
                        .HasColumnName("risk_class_id");

                    b.HasKey("Id")
                        .HasName("pk_rating_internals");

                    b.HasIndex("CounterpartyId")
                        .HasDatabaseName("ix_rating_internals_counterparty_id");

                    b.HasIndex("FinancialStatementId")
                        .HasDatabaseName("ix_rating_internals_financial_statement_id");

                    b.HasIndex("RatingId")
                        .HasDatabaseName("ix_rating_internals_rating_id");

                    b.HasIndex("RatingWcId")
                        .HasDatabaseName("ix_rating_internals_rating_wc_id");

                    b.HasIndex("RiskClassId")
                        .HasDatabaseName("ix_rating_internals_risk_class_id");

                    b.ToTable("rating_internals");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RiskClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_risk_classes");

                    b.ToTable("risk_classes");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Subsidiary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_subsidiaries");

                    b.ToTable("subsidiaries");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.FileTypeSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string[]>("AllocatedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("allocated_value_entry");

                    b.Property<string[]>("CountryEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("country_entry");

                    b.Property<string[]>("EstimatedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("estimated_value_entry");

                    b.Property<string[]>("FactValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("fact_value_entry");

                    b.Property<string[]>("GisEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("gis_entry");

                    b.Property<string[]>("MustHave")
                        .HasColumnType("text[]")
                        .HasColumnName("must_have");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string[]>("NotHave")
                        .HasColumnType("text[]")
                        .HasColumnName("not_have");

                    b.Property<string[]>("RequestedValueEntry")
                        .HasColumnType("text[]")
                        .HasColumnName("requested_value_entry");

                    b.HasKey("Id")
                        .HasName("pk_file_type_settings");

                    b.ToTable("file_type_settings");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.Gis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<bool>("IsExcluded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_excluded");

                    b.Property<bool>("IsUkraineTransport")
                        .HasColumnType("boolean")
                        .HasColumnName("is_ukraine_transport");

                    b.Property<int>("Multiplicator")
                        .HasColumnType("integer")
                        .HasColumnName("multiplicator");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gises");

                    b.ToTable("gises");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<int>("Multiplicator")
                        .HasColumnType("integer")
                        .HasColumnName("multiplicator");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gis_addons");

                    b.HasIndex("GisId")
                        .HasDatabaseName("ix_gis_addons_gis_id");

                    b.ToTable("gis_addons");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddonName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GisAddonId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_addon_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gis_addon_names");

                    b.HasIndex("GisAddonId")
                        .HasDatabaseName("ix_gis_addon_names_gis_addon_id");

                    b.ToTable("gis_addon_names");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddonValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("allocated_value");

                    b.Property<int>("AllocatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_report");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("estimated_value");

                    b.Property<int>("EstimatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("fact_value");

                    b.Property<int>("FactValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisAddonId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_addon_id");

                    b.Property<int>("RequestedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("requested_value_time_id");

                    b.Property<decimal>("RequstedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("requsted_value");

                    b.HasKey("Id")
                        .HasName("pk_gis_addon_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_fact_value_time_id");

                    b.HasIndex("GisAddonId")
                        .HasDatabaseName("ix_gis_addon_values_gis_addon_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_addon_values_requested_value_time_id");

                    b.ToTable("gis_addon_values");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<bool>("IsCalculated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_calculated");

                    b.Property<bool>("IsExcluded")
                        .HasColumnType("boolean")
                        .HasColumnName("is_excluded");

                    b.Property<int>("Multiplicator")
                        .HasColumnType("integer")
                        .HasColumnName("multiplicator");

                    b.HasKey("Id")
                        .HasName("pk_gis_countries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_gis_countries_country_id");

                    b.HasIndex("GisId")
                        .HasDatabaseName("ix_gis_countries_gis_id");

                    b.ToTable("gis_countries");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountryResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GisCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_id");

                    b.Property<int>("MonthNumber")
                        .HasColumnType("integer")
                        .HasColumnName("month_number");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_resources");

                    b.HasIndex("GisCountryId")
                        .HasDatabaseName("ix_gis_country_resources_gis_country_id");

                    b.ToTable("gis_country_resources");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountryValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("allocated_value");

                    b.Property<int>("AllocatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_report");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("estimated_value");

                    b.Property<int>("EstimatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("fact_value");

                    b.Property<int>("FactValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisCountryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_country_id");

                    b.Property<int>("RequestedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("requested_value_time_id");

                    b.Property<decimal>("RequstedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("requsted_value");

                    b.HasKey("Id")
                        .HasName("pk_gis_country_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_fact_value_time_id");

                    b.HasIndex("GisCountryId")
                        .HasDatabaseName("ix_gis_country_values_gis_country_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_country_values_requested_value_time_id");

                    b.ToTable("gis_country_values");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gis_names");

                    b.HasIndex("GisId")
                        .HasDatabaseName("ix_gis_names_gis_id");

                    b.ToTable("gis_names");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisPhgValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("AllocatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("allocated_value");

                    b.Property<int>("AllocatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("allocated_value_time_id");

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_report");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("estimated_value");

                    b.Property<int>("EstimatedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_value_time_id");

                    b.Property<decimal>("FactValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("fact_value");

                    b.Property<int>("FactValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("fact_value_time_id");

                    b.Property<int>("GisId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_id");

                    b.Property<bool>("IsInput")
                        .HasColumnType("boolean")
                        .HasColumnName("is_input");

                    b.Property<int>("RequestedValueTimeId")
                        .HasColumnType("integer")
                        .HasColumnName("requested_value_time_id");

                    b.Property<decimal>("RequstedValue")
                        .HasColumnType("numeric(8,8)")
                        .HasColumnName("requsted_value");

                    b.HasKey("Id")
                        .HasName("pk_gis_phg_values");

                    b.HasIndex("AllocatedValueTimeId")
                        .HasDatabaseName("ix_gis_phg_values_allocated_value_time_id");

                    b.HasIndex("EstimatedValueTimeId")
                        .HasDatabaseName("ix_gis_phg_values_estimated_value_time_id");

                    b.HasIndex("FactValueTimeId")
                        .HasDatabaseName("ix_gis_phg_values_fact_value_time_id");

                    b.HasIndex("GisId")
                        .HasDatabaseName("ix_gis_phg_values_gis_id");

                    b.HasIndex("RequestedValueTimeId")
                        .HasDatabaseName("ix_gis_phg_values_requested_value_time_id");

                    b.ToTable("gis_phg_values");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.InputFileLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateFile")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_file");

                    b.Property<string>("Filename")
                        .HasColumnType("text")
                        .HasColumnName("filename");

                    b.Property<DateTime>("TimeFile")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_file");

                    b.Property<DateTime>("TimeInput")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_input");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_input_file_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_input_file_logs_user_id");

                    b.ToTable("input_file_logs");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.ReviewFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<bool>("StrictAllocatedValueEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_allocated_value_entries");

                    b.Property<bool>("StrictCountryNameEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_country_name_entries");

                    b.Property<bool>("StrictEstimatedValueEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_estimated_value_entries");

                    b.Property<bool>("StrictFactValueEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_fact_value_entries");

                    b.Property<bool>("StrictGisNameEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_gis_name_entries");

                    b.Property<bool>("StrictMustHaveNames")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_must_have_names");

                    b.Property<bool>("StrictNotHaveNames")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_not_have_names");

                    b.Property<bool>("StrictRequestedValueEntries")
                        .HasColumnType("boolean")
                        .HasColumnName("strict_requested_value_entries");

                    b.HasKey("Id")
                        .HasName("pk_review_file_types");

                    b.ToTable("review_file_types");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.ReviewFileTypeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AllocatedValueEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("allocated_value_entry_id");

                    b.Property<int?>("CountryNameEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_name_entry_id");

                    b.Property<int?>("EstimatedValueEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("estimated_value_entry_id");

                    b.Property<int?>("FactValueEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("fact_value_entry_id");

                    b.Property<int?>("GisNameEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("gis_name_entry_id");

                    b.Property<int?>("MustHaveNameId")
                        .HasColumnType("integer")
                        .HasColumnName("must_have_name_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("NotHaveNameId")
                        .HasColumnType("integer")
                        .HasColumnName("not_have_name_id");

                    b.Property<int?>("RequestedValueEntryId")
                        .HasColumnType("integer")
                        .HasColumnName("requested_value_entry_id");

                    b.HasKey("Id")
                        .HasName("pk_review_file_type_names");

                    b.HasIndex("AllocatedValueEntryId")
                        .HasDatabaseName("ix_review_file_type_names_allocated_value_entry_id");

                    b.HasIndex("CountryNameEntryId")
                        .HasDatabaseName("ix_review_file_type_names_country_name_entry_id");

                    b.HasIndex("EstimatedValueEntryId")
                        .HasDatabaseName("ix_review_file_type_names_estimated_value_entry_id");

                    b.HasIndex("FactValueEntryId")
                        .HasDatabaseName("ix_review_file_type_names_fact_value_entry_id");

                    b.HasIndex("GisNameEntryId")
                        .HasDatabaseName("ix_review_file_type_names_gis_name_entry_id");

                    b.HasIndex("MustHaveNameId")
                        .HasDatabaseName("ix_review_file_type_names_must_have_name_id");

                    b.HasIndex("NotHaveNameId")
                        .HasDatabaseName("ix_review_file_type_names_not_have_name_id");

                    b.HasIndex("RequestedValueEntryId")
                        .HasDatabaseName("ix_review_file_type_names_requested_value_entry_id");

                    b.ToTable("review_file_type_names");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameEn")
                        .HasColumnType("text")
                        .HasColumnName("name_en");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.Property<string>("Ticker")
                        .HasColumnType("text")
                        .HasColumnName("ticker");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.CountryName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country_names");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_country_names_country_id");

                    b.ToTable("country_names");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_currencies");

                    b.ToTable("currencies");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ShortName")
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("Id")
                        .HasName("pk_departments");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_role_claims_role_id");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_asp_net_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_claims_user_id");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_asp_net_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_asp_net_user_logins_user_id");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_asp_net_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_asp_net_user_roles_role_id");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_asp_net_user_tokens");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LogSuite.DataAccess.ApplicationUser", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Department", "Department")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("fk_asp_net_users_departments_department_id");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Committee", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.CommitteeLimit", "CommitteeLimit")
                        .WithMany()
                        .HasForeignKey("CommitteeLimitId")
                        .HasConstraintName("fk_committees_committee_limits_committee_limit_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.CommitteeStatus", "CommitteeStatus")
                        .WithMany()
                        .HasForeignKey("CommitteeStatusId")
                        .HasConstraintName("fk_committees_committee_statuses_committee_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("Committees")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_committees_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommitteeLimit");

                    b.Navigation("CommitteeStatus");

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.CounterpartyGroup", "CounterpartyGroup")
                        .WithMany()
                        .HasForeignKey("CounterpartyGroupId")
                        .HasConstraintName("fk_counterparties_counterparty_groups_counterparty_group_id");

                    b.HasOne("LogSuite.DataAccess.References.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_counterparties_countries_country_id");

                    b.HasOne("LogSuite.DataAccess.References.Country", "CountryRisk")
                        .WithMany()
                        .HasForeignKey("CountryRiskId")
                        .HasConstraintName("fk_counterparties_countries_country_risk_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.FinancialSector", "FinancialSector")
                        .WithMany()
                        .HasForeignKey("FinancialSectorId")
                        .HasConstraintName("fk_counterparties_financial_sectors_financial_sector_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "RatingDonor")
                        .WithMany()
                        .HasForeignKey("RatingDonorId")
                        .HasConstraintName("fk_counterparties_counterparties_rating_donor_id");

                    b.Navigation("CounterpartyGroup");

                    b.Navigation("Country");

                    b.Navigation("CountryRisk");

                    b.Navigation("FinancialSector");

                    b.Navigation("RatingDonor");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CounterpartyPortfolio", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("CounterpartyPortfolios")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_counterparty_portfolios_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Portfolio", "Portfolio")
                        .WithMany("CounterpartyPortfolios")
                        .HasForeignKey("PortfolioId")
                        .HasConstraintName("fk_counterparty_portfolios_portfolios_portfolio_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.CurrencyRate", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Currency", "CurrencyFrom")
                        .WithMany()
                        .HasForeignKey("CurrencyFromId")
                        .HasConstraintName("fk_currency_rates_currencies_currency_from_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.References.Currency", "CurrencyTo")
                        .WithMany()
                        .HasForeignKey("CurrencyToId")
                        .HasConstraintName("fk_currency_rates_currencies_currency_to_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyFrom");

                    b.Navigation("CurrencyTo");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.FinancialStatement", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("FinancialStatements")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_financial_statements_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.FinancialStatementStandard", "FinancialStatementStandard")
                        .WithMany()
                        .HasForeignKey("FinancialStatementStandardId")
                        .HasConstraintName("fk_financial_statements_financial_statement_standards_financia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("FinancialStatementStandard");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Guarantee", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Beneficiar")
                        .WithMany("BeneficiarGuarantees")
                        .HasForeignKey("BeneficiarId")
                        .HasConstraintName("fk_guarantees_counterparties_beneficiar_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("Guarantees")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_guarantees_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.References.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_guarantees_currencies_currency_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.GuaranteeType", "GuaranteeType")
                        .WithMany()
                        .HasForeignKey("GuaranteeTypeId")
                        .HasConstraintName("fk_guarantees_guarantee_types_guarantee_type_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Guarantor")
                        .WithMany("GuarantorGuarantees")
                        .HasForeignKey("GuarantorId")
                        .HasConstraintName("fk_guarantees_counterparties_guarantor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Subsidiary", "Subsidiary")
                        .WithMany()
                        .HasForeignKey("SubsidiaryId")
                        .HasConstraintName("fk_guarantees_subsidiaries_subsidiary_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beneficiar");

                    b.Navigation("Counterparty");

                    b.Navigation("Currency");

                    b.Navigation("GuaranteeType");

                    b.Navigation("Guarantor");

                    b.Navigation("Subsidiary");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeApprovalDoc", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.GuaranteeApprovalDocType", "GuaranteeApprovalDocType")
                        .WithMany()
                        .HasForeignKey("GuaranteeApprovalDocTypeId")
                        .HasConstraintName("fk_guarantee_approval_docs_guarantee_approval_doc_types_guaran")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Guarantee", "Guarantee")
                        .WithMany()
                        .HasForeignKey("GuaranteeId")
                        .HasConstraintName("fk_guarantee_approval_docs_guarantees_guarantee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guarantee");

                    b.Navigation("GuaranteeApprovalDocType");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeLimit", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("fk_guarantee_limits_currencies_currency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.GuaranteeType", "GuaranteeType")
                        .WithMany()
                        .HasForeignKey("GuaranteeTypeId")
                        .HasConstraintName("fk_guarantee_limits_guarantee_types_guarantee_type_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Guarantor")
                        .WithMany()
                        .HasForeignKey("GuarantorId")
                        .HasConstraintName("fk_guarantee_limits_counterparties_guarantor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("GuaranteeType");

                    b.Navigation("Guarantor");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.GuaranteeReport", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Guarantee", "Guarantee")
                        .WithMany()
                        .HasForeignKey("GuaranteeId")
                        .HasConstraintName("fk_guarantee_reports_guarantees_guarantee_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guarantee");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Rating", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.RatingGroup", "RatingGroup")
                        .WithMany("Ratings")
                        .HasForeignKey("RatingGroupId")
                        .HasConstraintName("fk_ratings_rating_groups_rating_group_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingGroup");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingCountry", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_rating_countries_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.RatingAgency", "RatingAgency")
                        .WithMany()
                        .HasForeignKey("RatingAgencyId")
                        .HasConstraintName("fk_rating_countries_rating_agencies_rating_agency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_countries_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Rating");

                    b.Navigation("RatingAgency");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingExternal", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("RatingExternals")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_rating_externals_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.RatingAgency", "RatingAgency")
                        .WithMany()
                        .HasForeignKey("RatingAgencyId")
                        .HasConstraintName("fk_rating_externals_rating_agencies_rating_agency_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_externals_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");

                    b.Navigation("Rating");

                    b.Navigation("RatingAgency");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingInternal", b =>
                {
                    b.HasOne("LogSuite.DataAccess.CredRisk.Counterparty", "Counterparty")
                        .WithMany("RatingInternals")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("fk_rating_internals_counterparties_counterparty_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.FinancialStatement", "FinancialStatement")
                        .WithMany()
                        .HasForeignKey("FinancialStatementId")
                        .HasConstraintName("fk_rating_internals_financial_statements_financial_statement_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .HasConstraintName("fk_rating_internals_ratings_rating_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.CredRisk.Rating", "RatingWc")
                        .WithMany()
                        .HasForeignKey("RatingWcId")
                        .HasConstraintName("fk_rating_internals_ratings_rating_wc_id");

                    b.HasOne("LogSuite.DataAccess.CredRisk.RiskClass", "RiskClass")
                        .WithMany()
                        .HasForeignKey("RiskClassId")
                        .HasConstraintName("fk_rating_internals_risk_classes_risk_class_id");

                    b.Navigation("Counterparty");

                    b.Navigation("FinancialStatement");

                    b.Navigation("Rating");

                    b.Navigation("RatingWc");

                    b.Navigation("RiskClass");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddon", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.Gis", "Gis")
                        .WithMany("Addons")
                        .HasForeignKey("GisId")
                        .HasConstraintName("fk_gis_addons_gises_gis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gis");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddonName", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.GisAddon", "GisAddon")
                        .WithMany("Names")
                        .HasForeignKey("GisAddonId")
                        .HasConstraintName("fk_gis_addon_names_gis_addons_gis_addon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GisAddon");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddonValue", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_file_logs_allocated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_file_logs_estimated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_file_logs_fact_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.GisAddon", "GisAddon")
                        .WithMany("Values")
                        .HasForeignKey("GisAddonId")
                        .HasConstraintName("fk_gis_addon_values_gis_addons_gis_addon_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_addon_values_input_file_logs_requested_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("GisAddon");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountry", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_gis_countries_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.Gis", "Gis")
                        .WithMany("Countries")
                        .HasForeignKey("GisId")
                        .HasConstraintName("fk_gis_countries_gises_gis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gis");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountryResource", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.GisCountry", "GisCountry")
                        .WithMany("Resources")
                        .HasForeignKey("GisCountryId")
                        .HasConstraintName("fk_gis_country_resources_gis_countries_gis_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GisCountry");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountryValue", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_file_logs_allocated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_file_logs_estimated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_file_logs_fact_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.GisCountry", "GisCountry")
                        .WithMany("Values")
                        .HasForeignKey("GisCountryId")
                        .HasConstraintName("fk_gis_country_values_gis_countries_gis_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_country_values_input_file_logs_requested_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("GisCountry");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisName", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.Gis", "Gis")
                        .WithMany("Names")
                        .HasForeignKey("GisId")
                        .HasConstraintName("fk_gis_names_gises_gis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gis");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisPhgValue", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "AllocatedValueTime")
                        .WithMany()
                        .HasForeignKey("AllocatedValueTimeId")
                        .HasConstraintName("fk_gis_phg_values_input_file_logs_allocated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "EstimatedValueTime")
                        .WithMany()
                        .HasForeignKey("EstimatedValueTimeId")
                        .HasConstraintName("fk_gis_phg_values_input_file_logs_estimated_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "FactValueTime")
                        .WithMany()
                        .HasForeignKey("FactValueTimeId")
                        .HasConstraintName("fk_gis_phg_values_input_file_logs_fact_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.Gis", "Gis")
                        .WithMany("PhgValues")
                        .HasForeignKey("GisId")
                        .HasConstraintName("fk_gis_phg_values_gises_gis_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.Operativka.InputFileLog", "RequestedValueTime")
                        .WithMany()
                        .HasForeignKey("RequestedValueTimeId")
                        .HasConstraintName("fk_gis_phg_values_input_file_logs_requested_value_time_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllocatedValueTime");

                    b.Navigation("EstimatedValueTime");

                    b.Navigation("FactValueTime");

                    b.Navigation("Gis");

                    b.Navigation("RequestedValueTime");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.InputFileLog", b =>
                {
                    b.HasOne("LogSuite.DataAccess.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_input_file_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.ReviewFileTypeName", b =>
                {
                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "AllocatedValueEntry")
                        .WithMany("AllocatedValueEntries")
                        .HasForeignKey("AllocatedValueEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_allocated_value_en");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "CountryNameEntry")
                        .WithMany("CountryNameEntries")
                        .HasForeignKey("CountryNameEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_country_name_entry");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "EstimatedValueEntry")
                        .WithMany("EstimatedValueEntries")
                        .HasForeignKey("EstimatedValueEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_estimated_value_en");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "FactValueEntry")
                        .WithMany("FactValueEntries")
                        .HasForeignKey("FactValueEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_fact_value_entry_id");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "GisNameEntry")
                        .WithMany("GisNameEntries")
                        .HasForeignKey("GisNameEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_gis_name_entry_id");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "MustHaveName")
                        .WithMany("MustHaveNames")
                        .HasForeignKey("MustHaveNameId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_must_have_name_id");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "NotHaveName")
                        .WithMany("NotHaveNames")
                        .HasForeignKey("NotHaveNameId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_not_have_name_id");

                    b.HasOne("LogSuite.DataAccess.Operativka.ReviewFileType", "RequestedValueEntry")
                        .WithMany("RequestedValueEntries")
                        .HasForeignKey("RequestedValueEntryId")
                        .HasConstraintName("fk_review_file_type_names_review_file_types_requested_value_en");

                    b.Navigation("AllocatedValueEntry");

                    b.Navigation("CountryNameEntry");

                    b.Navigation("EstimatedValueEntry");

                    b.Navigation("FactValueEntry");

                    b.Navigation("GisNameEntry");

                    b.Navigation("MustHaveName");

                    b.Navigation("NotHaveName");

                    b.Navigation("RequestedValueEntry");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.CountryName", b =>
                {
                    b.HasOne("LogSuite.DataAccess.References.Country", "Country")
                        .WithMany("Names")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_country_names_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_role_claims_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LogSuite.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_claims_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LogSuite.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_logins_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogSuite.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_roles_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LogSuite.DataAccess.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_asp_net_user_tokens_asp_net_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Counterparty", b =>
                {
                    b.Navigation("BeneficiarGuarantees");

                    b.Navigation("Committees");

                    b.Navigation("CounterpartyPortfolios");

                    b.Navigation("FinancialStatements");

                    b.Navigation("Guarantees");

                    b.Navigation("GuarantorGuarantees");

                    b.Navigation("RatingExternals");

                    b.Navigation("RatingInternals");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.Portfolio", b =>
                {
                    b.Navigation("CounterpartyPortfolios");
                });

            modelBuilder.Entity("LogSuite.DataAccess.CredRisk.RatingGroup", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.Gis", b =>
                {
                    b.Navigation("Addons");

                    b.Navigation("Countries");

                    b.Navigation("Names");

                    b.Navigation("PhgValues");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisAddon", b =>
                {
                    b.Navigation("Names");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.GisCountry", b =>
                {
                    b.Navigation("Resources");

                    b.Navigation("Values");
                });

            modelBuilder.Entity("LogSuite.DataAccess.Operativka.ReviewFileType", b =>
                {
                    b.Navigation("AllocatedValueEntries");

                    b.Navigation("CountryNameEntries");

                    b.Navigation("EstimatedValueEntries");

                    b.Navigation("FactValueEntries");

                    b.Navigation("GisNameEntries");

                    b.Navigation("MustHaveNames");

                    b.Navigation("NotHaveNames");

                    b.Navigation("RequestedValueEntries");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.Country", b =>
                {
                    b.Navigation("Names");
                });

            modelBuilder.Entity("LogSuite.DataAccess.References.Department", b =>
                {
                    b.Navigation("ApplicationUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
