@page "/department/create"
@page "/department/edit/{Id:int}"
@inject IDepartmentService DepartmentService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="row mt-2 mb-5">
    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="@DepartmentModel" OnValidSubmit="HandleDepartmentUpsert">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label>Code</label>
                        <InputNumber @bind-Value="@DepartmentModel.Code" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>DepartmentModel.Code"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="@DepartmentModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>DepartmentModel.Name"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <label>ShortName</label>
                        <InputText @bind-Value="@DepartmentModel.ShortName" class="form-control"></InputText>
                        <ValidationMessage For="()=>DepartmentModel.ShortName"></ValidationMessage>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="department" class="btn btn-secondary">Back To List</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int? Id { get; set; }

    private DepartmentDTO DepartmentModel { get; set; } = new DepartmentDTO();
    private string Title { get; set; } = "Create";

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            Title = "Update";
            DepartmentModel = await DepartmentService.Get(Id.Value);
        }
        else
        {
            DepartmentModel = new DepartmentDTO();
        }
    }

    private async Task HandleDepartmentUpsert()
    {
        try
        {
            var createdResult = await DepartmentService.Create(DepartmentModel);
            await JsRuntime.ToastrSuccess("hotel room created successfully");
        }
        catch (Exception ex)
        {

        }

        NavigationManager.NavigateTo("department");
    }

}
